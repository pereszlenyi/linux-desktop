#!/bin/bash

# This file was generated from template {{ CURRENT_DIRECTORY }}/templates/bash_profile.sh.j2

export FULLNAME="{{ FULLNAME }}"
export EMAIL="{{ EMAIL }}"

alias l='/usr/bin/ls -lah'
alias less='/usr/bin/less --quit-if-one-screen --LINE-NUMBERS'
alias bat='/usr/bin/batcat'
alias fd='/usr/bin/fdfind --hidden'
alias ncdu='/usr/bin/ncdu -rr --color dark -x'
alias diff='/usr/bin/colordiff'
alias joe='/usr/bin/joe -beep -keepup -autoindent -highlight -linums -smartbacks -smarthome -wordwrap'
alias glances='/usr/bin/glances --time 1'
alias neofetch='/usr/bin/neofetch --memory_percent on --color_blocks off'
alias screenfetch="/usr/bin/screenfetch -d '-disk'"
alias srm='/usr/bin/srm -rvz'

# Pulls the updates from the Git repository then runs the install script.
alias run_install_script='/bin/bash -c \
	"cd {{ CURRENT_DIRECTORY }} && \
	/usr/bin/git pull --quiet --ff-only && \
	builtin echo \"=== Git status ===\" && \
	/usr/bin/git status --untracked-files=no && \
	builtin echo \"\" && \
	./install.sh"'
# Updates all packages in the system
alias upgrade_system='/usr/bin/sudo /bin/bash -c \
	"/usr/bin/aptitude update && /usr/bin/aptitude full-upgrade && /usr/bin/aptitude autoclean \
	&& /usr/bin/snap refresh"'
alias verify_ubuntu_iso='{{ CURRENT_DIRECTORY }}/scripts/verify_ubuntu_iso.sh'
alias encrypt='{{ CURRENT_DIRECTORY }}/scripts/encrypt.sh'
alias decrypt='{{ CURRENT_DIRECTORY }}/scripts/decrypt.sh'
alias git_commit_and_push='{{ CURRENT_DIRECTORY }}/scripts/git_commit_and_push.sh'
alias git_tag_and_push='{{ CURRENT_DIRECTORY }}/scripts/git_tag_and_push.sh'

# Signed commit
alias git_commit='/usr/bin/git commit --gpg-sign'
# Push with reduced verbosity
alias git_push='/usr/bin/git push --quiet'
# Pull with reduced verbosity
alias git_pull='/usr/bin/git pull --gpg-sign --no-edit --quiet'
# Prints all the details of the commits
alias git_log_raw='/usr/bin/git log --format=raw --no-abbrev-commit --patch --unified=0'
# Fetches updates from the remote repository before printing status
alias git_status='/usr/bin/git fetch --quiet && /usr/bin/git status'
# Fetches updates from the remote repository before switching branches
alias git_switch='/usr/bin/git fetch --quiet && /usr/bin/git switch'
# Creates a new branch
alias git_create_branch='/usr/bin/git checkout -b'
# Before merging, updates are pulled from the remotes
function git_merge {
	/usr/bin/git pull --quiet && \
	/usr/bin/git switch --quiet "$1" && \
	/usr/bin/git pull --quiet && \
	/usr/bin/git switch --quiet - && \
	/usr/bin/git merge --gpg-sign "$1" && \
	echo -e "\n=== Git status ===" && \
	/usr/bin/git status
}
# Deletes the current branch both locally and remotely
function git_delete_branch {
	BRANCH=$(/usr/bin/git branch --show-current)
	if "{{ CURRENT_DIRECTORY }}/scripts/yes_or_no.sh" \
		"Do you want to delete branch '$BRANCH' both locally and remotely?" ; then
		echo "" && \
		/usr/bin/git fetch --quiet && \
		/usr/bin/git push --delete origin "$BRANCH" && \
		/usr/bin/git switch --quiet - && \
		/usr/bin/git branch -D "$BRANCH" && \
		echo -e "\n=== Branch '$BRANCH' was deleted ==="
	else
		echo "Aborting."
	fi
}

/usr/bin/git config --global user.name "$FULLNAME"
/usr/bin/git config --global user.email "$EMAIL"
/usr/bin/git config --global core.editor "{{ CURRENT_DIRECTORY }}/scripts/git_editor.sh"
/usr/bin/git config --global core.autocrlf input
/usr/bin/git config --global diff.tool meld
/usr/bin/git config --global gpg.format ssh
/usr/bin/git config --global user.signingkey "~/.ssh/{{ SSH_KEY_FILENAME }}.pub"
/usr/bin/git config --global credential.helper "cache --timeout=36000"
/usr/bin/git config --global init.defaultBranch main
# The remote branch is created by push, if it doesn't exist
/usr/bin/git config --global push.autoSetupRemote "true"
# Defaults to merge when doing a pull
/usr/bin/git config --global pull.rebase "false"
# Moved lines of code are colored differently
/usr/bin/git config --global diff.colorMoved "default"
# Whitespace is only ignored at the end of lines when performing the move detection
/usr/bin/git config --global diff.colorMovedWS "ignore-space-at-eol"
{% if INSTALL_JAVA %}

export JAVA_HOME="/usr/lib/jvm/zulu{{ JDK_VERSION }}-ca-{{ ARCHITECTURE }}"
# Adding Java and Maven to the path
export PATH="${JAVA_HOME}/bin:{{ CURRENT_DIRECTORY }}/bin/apache-maven-{{ MAVEN_VERSION }}/bin:${PATH}"
{% endif %}
{% if CONTAINERIZATION_TECHS %}

# Adding Helm to the path
export PATH="{{ HELM_INSTALL_DIRECTORY }}/linux-{{ ARCHITECTURE }}:${PATH}"

# Enabling kubectl autocompletion
source <(/usr/bin/kubectl completion bash)
{% endif %}

# This section changes the Bash prompt

# Replaces all matches of a regular expression in a string and
# prints the result to the standard output.
function replace_regex {
	/usr/bin/sed "s/$1/$2/g" <<<"$3"
}

# Displays the exit status of the previous command.
function exit_status {
	if [ $? -eq 0 ] ; then
		echo -e -n '\033[00;32m\u2714'
	else
		echo -e -n '\033[00;31m\u2718'
	fi
	echo -e '\033[00m'
}

# Displays a check mark if the previous command exited with success.
function prompt_check_mark {
	if [ $? -eq 0 ] ; then
		echo -e '\u2714'
	else
		false
	fi
}

# Displays an X mark if the previous command exited with error.
function prompt_x_mark {
	if [ $? -ne 0 ] ; then
		echo -e '\u2718'
	fi
}

# Displays the current Git branch in parentheses.
function prompt_git_branch {
	if /usr/bin/git rev-parse --is-inside-work-tree &>/dev/null ; then
		echo -n ' (' && \
		/usr/bin/git branch --show-current | /usr/bin/tr --delete '\n' && \
		echo ')'
	fi
}

# Displays a star, if there are modified files in the current Git working tree.
function prompt_git_star {
	if { /usr/bin/git rev-parse --is-inside-work-tree && \
		/usr/bin/git status --porcelain --untracked-files=no | \
		/usr/bin/grep --extended-regexp '.' ; } &>/dev/null
	then
		echo '*'
	fi
}

PROMPT_SEPARATOR_COLOR="00;33m"

# Displaying information about the current Git repository and setting a color for the '$' at the end.
NEW_PROMPT=$(replace_regex "\\\\\\[\\\\033\\[00m\\\\\\]\\\\\$ \$" \
	"\\\\[\\\\033[01;31m\\\\]\$(prompt_git_branch)\\\\[\\\\033[01;35m\\\\]\$(prompt_git_star)\\\\[\\\\033[$PROMPT_SEPARATOR_COLOR\\\\] \\\\\$\\\\[\\\\033[00m\\\\] " \
	"$PS1")
# Setting a color for the colon.
NEW_PROMPT=$(replace_regex "\\[00m\\\\]:" "[$PROMPT_SEPARATOR_COLOR\\\\]:" "$NEW_PROMPT")
# Setting a color for the '@'.
NEW_PROMPT=$(replace_regex "@\\\\h\\\\" \
	"\\\\[\\\\033[$PROMPT_SEPARATOR_COLOR\\\\]@\\\\[\\\\033[01;32m\\\\]\\\\h\\\\" "$NEW_PROMPT")
# Displaying the exit status of the previous command in front of the prompt.
NEW_PROMPT=$(replace_regex "debian_chroot)}\\\\\\[\\\\033\\[01;32m\\\\\\]" \
	"debian_chroot)}\\\\[\\\\033[00;32m\\\\]\$(prompt_check_mark)\\\\[\\\\033[00;31m\\\\]\$(prompt_x_mark)\\\\[\\\\033[01;32m\\\\]" \
	"$NEW_PROMPT")

PS1="$NEW_PROMPT"

# Secondary prompt for multi-line commands.
SECONDARY_PROMPT_CHAR=$(echo -e '\u21AA')
PS2="\\[\\033[${PROMPT_SEPARATOR_COLOR}\\]${SECONDARY_PROMPT_CHAR}\\[\\033[00m\\] "
