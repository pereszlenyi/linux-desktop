---
  - name: Collecting information and checking system
    hosts: localhost
    connection: local
    vars:
      ARCHITECTURE_ALIAS:
        x86_64: amd64
      REQUIRED_SYSTEMD_SERVICES:
        - unattended-upgrades
        - snapd
      CONTAINERIZATION_SERVICES:
        - docker.service
        - containerd.service

    tasks:

      - name: Exiting if we are not running Ubuntu
        ansible.builtin.fail:
          msg: "The OS is {{ ansible_facts['distribution'] }}. This playbook is only meant to work with Ubuntu."
        when: ansible_facts['distribution'] != "Ubuntu"

      - name: Populating service facts
        ansible.builtin.service_facts:

      - name: Setting system variables
        ansible.builtin.set_fact:
          ARCHITECTURE: "{{ ARCHITECTURE_ALIAS[ansible_facts['architecture']] }}"
          HOSTNAME: "{{ (ansible_facts['distribution'] + '-' + ansible_facts['distribution_version']) | replace('.', '-') }}"
          SYSTEMD_IS_RUNNING: "{{ 'systemd-logind.service' in ansible_facts['services'] }}"
          CONTAINERIZATION_TECHS: "{{ INSTALL_CONTAINERIZATION_TECHS is defined and INSTALL_CONTAINERIZATION_TECHS == 'true' }}"

      - name: Exiting if we were not able to determine the architecture
        ansible.builtin.fail:
          msg: "Can't find an alias for architecture '{{ ansible_facts['architecture'] }}'."
        when: CONTAINERIZATION_TECHS and (ansible_facts['architecture'] not in ARCHITECTURE_ALIAS)

      - name: Setting playbook variables
        ansible.builtin.set_fact:
          SYSTEMD_SERVICES: "{{ REQUIRED_SYSTEMD_SERVICES + (CONTAINERIZATION_SERVICES if CONTAINERIZATION_TECHS else []) }}"

  - name: Systemwide changes
    hosts: localhost
    connection: local
    become: yes

    tasks:

      - name: Adding a PPA that provides the latest stable upstream Git version
        ansible.builtin.apt_repository:
          repo: ppa:git-core/ppa
          update_cache: no

      - name: Updating system
        ansible.builtin.apt:
          update_cache: yes
          upgrade: full
        tags: update

      - name: Installing packages
        ansible.builtin.apt:
          cache_valid_time: 600
          update_cache: yes
          install_recommends: yes
          name:
            - ansible
            - ansible-doc
            - gnupg
            - ca-certificates
            - coreutils
            - bash-completion
            - aptitude
            - unattended-upgrades
            - snapd
            - git
            - openssh-client
            - joe
            - mc
            - tofrodos
            - python3-pip
            - finger
            - htop
            - colordiff
            - build-essential
            - cmake
            - p7zip-full
            # Fonts
            - fonts-noto
            - fonts-recommended
            - fonts-cascadia-code
            - fonts-droid-fallback
            - fonts-firacode
            - fonts-font-awesome
            - fonts-fork-awesome
            - fonts-monoid
            - fonts-monoid-halfloose
            - fonts-monoid-halftight
            - fonts-monoid-loose
            - fonts-monoid-tight
            # GUI applications
            - gitk
            - geany
            - geany-plugins
            - adwaita-icon-theme-full
            - meld
            - gpa
            - font-manager
          state: latest
        tags: install

      - name: Creating directory /etc/apt/keyrings if it does not exist
        ansible.builtin.file:
          path: /etc/apt/keyrings
          state: directory
          mode: u=rwx,g=rx,o=rx

      - name: Installing packages for Java
        ansible.builtin.apt:
          cache_valid_time: 600
          update_cache: yes
          install_recommends: yes
          name:
            - default-jdk
            - default-jdk-doc
            - maven
          state: latest
        tags: java

      - name: Removing Mozilla Firefox deb package
        ansible.builtin.apt:
          name: firefox
          state: absent
        when: SYSTEMD_IS_RUNNING

      - name: Removing old versions of Docker
        ansible.builtin.apt:
          name:
            - docker
            - docker-engine
            - docker.io
            - containerd
            - runc
          state: absent
        when: CONTAINERIZATION_TECHS

      - name: Adding GPG keys from apt_keyrings
        ansible.builtin.shell:
          cmd: /usr/bin/gpg --dearmor --output /etc/apt/keyrings/{{ item }}.gpg <./apt_keyrings/{{ item }}.txt
          creates: /etc/apt/keyrings/{{ item }}.gpg
          executable: /bin/bash
        loop:
          - docker
          - microsoft
        when: CONTAINERIZATION_TECHS

      - name: Downloading the Google Cloud public signing key
        ansible.builtin.get_url:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
          mode: u=rw,g=r,o=r
          checksum: sha256:3d75e27fc397a5a3f036b9cd6bd7ba83c46e518eaa2d6c962ddaccf0131a01cd
        when: CONTAINERIZATION_TECHS

      - name: Adding repositories for containerization technologies
        ansible.builtin.apt_repository:
          repo: "{{ item.value }}"
          filename: "{{ item.key }}"
          update_cache: no
        with_dict:
          docker: deb [arch={{ ARCHITECTURE }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_facts['distribution_release'] }} stable
          kubernetes: deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
          azure-cli: deb [arch={{ ARCHITECTURE }} signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ {{ ansible_facts['distribution_release'] }} main
        when: CONTAINERIZATION_TECHS

      - name: Installing containerization technologies
        ansible.builtin.apt:
          update_cache: yes
          install_recommends: yes
          name:
            # Docker
            - docker-ce
            - docker-ce-cli
            - containerd.io
            - docker-buildx-plugin
            - docker-compose-plugin
            # Kubernetes
            - kubectl
            # Azure CLI
            - azure-cli
          state: latest
        when: CONTAINERIZATION_TECHS

      - name: Cleaning the local apt cache
        ansible.builtin.apt:
          autoclean: yes

      - name: Ensuring group docker exists
        ansible.builtin.group:
          name: docker
          state: present
        when: CONTAINERIZATION_TECHS

      - name: Adding the user to the docker group
        ansible.builtin.user:
          name: "{{ ansible_facts['env']['SUDO_USER'] }}"
          groups: docker
          append: yes
        notify: "reboot required"
        when: CONTAINERIZATION_TECHS

      - name: Starting services if they are not running
        ansible.builtin.service:
          name: '{{ item }}'
          state: started
          enabled: yes
        with_items: '{{ SYSTEMD_SERVICES }}'
        when: SYSTEMD_IS_RUNNING

      - name: Installing Mozilla Firefox snap
        community.general.snap:
          name: firefox
        when: SYSTEMD_IS_RUNNING

      - name: Installing IntelliJ IDEA Community Edition
        community.general.snap:
          name: intellij-idea-community
          classic: true
        when: SYSTEMD_IS_RUNNING
        tags: java

      - name: Installing Helm
        community.general.snap:
          name: helm
          classic: true
        when: CONTAINERIZATION_TECHS and SYSTEMD_IS_RUNNING

      - name: Creating /etc/wsl.conf from template wsl.conf.j2
        ansible.builtin.template:
          src: ./templates/wsl.conf.j2
          dest: /etc/wsl.conf
          mode: u=rw,g=r,o=r
        notify: "reboot required"
        tags: wsl.conf

    handlers:
      - name: Touching /var/run/reboot-required
        ansible.builtin.file:
          path: /var/run/reboot-required
          state: touch
          mode: u=rw,g=r,o=r
        listen: "reboot required"

  - name: Setting up the environment for the current user
    hosts: localhost
    connection: local
    tags: user
    vars:
      SSH_KEY_FILENAME: "id_ed25519.git"
      SSH_KEY_FINGERPRINTS: [
        "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl",
        "github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=",
        "github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=="
      ]

    tasks:

      - name: Exiting if FULLNAME or EMAIL are not defined
        ansible.builtin.fail:
          msg: "Required variables FULLNAME or EMAIL are not defined."
        when: (FULLNAME is undefined) or (EMAIL is undefined)

      - name: Creating directory ~/.ssh/ if it does not exist
        ansible.builtin.file:
          path: ~/.ssh/
          state: directory
          mode: u=rwx,g=,o=
        tags: ssh

      - name: Generating a GitHub recommended SSH key if it doesn't exist
        community.crypto.openssh_keypair:
          path: ~/.ssh/{{ SSH_KEY_FILENAME }}
          type: ed25519
          comment: "{{ EMAIL }}"
          regenerate: partial_idempotence
        tags: ssh

      - name: Creating ~/.ssh/config from template ssh_client_config.j2
        ansible.builtin.template:
          src: ./templates/ssh_client_config.j2
          dest: ~/.ssh/config
          mode: u=rw,g=,o=
          backup: yes
        tags: ssh

      - name: Adding SSH key fingerprints to ~/.ssh/known_hosts
        ansible.builtin.lineinfile:
          path: ~/.ssh/known_hosts
          line: '{{ item }}'
          mode: u=rw,g=,o=
          create: yes
        with_items: '{{ SSH_KEY_FINGERPRINTS }}'
        tags: ssh

      - name: Setting up GPG
        ansible.builtin.command:
          cmd: ./scripts/setup_gpg.sh "{{ FULLNAME }}" "{{ EMAIL }}"
          creates: ~/.gnupg
        register: GPG_OUTPUT
        tags: gpg

      - name: Printing the output of GPG setup
        ansible.builtin.debug:
          var: GPG_OUTPUT['stdout_lines']
        tags: gpg

      - name: Creating ~/bash_profile.sh from template bash_profile.sh.j2
        ansible.builtin.template:
          src: ./templates/bash_profile.sh.j2
          dest: ~/bash_profile.sh
          mode: u=rwx,g=r,o=r
        tags: bash_profile.sh

      - name: Adding a line to ~/.bashrc to run ~/bash_profile.sh
        ansible.builtin.lineinfile:
          path: ~/.bashrc
          line: . ~/bash_profile.sh
          backup: yes
        tags: bash_profile.sh

      - name: Setting the full name in /etc/passwd
        ansible.builtin.command: /usr/bin/chfn --full-name "{{ FULLNAME }}" {{ ansible_facts['user_id'] }}
        become: yes
        ignore_errors: yes
        when: FULLNAME != (ansible_facts['user_gecos'] | split(','))[0]

      - name: Installing docker python package
        ansible.builtin.pip:
          name: docker
          extra_args: --upgrade
          executable: /usr/bin/pip3
        when: CONTAINERIZATION_TECHS

      - name: Inspecting if image hello-world is present
        community.docker.docker_image_info:
          name: hello-world
        register: DOCKER_IMAGE_OUTPUT
        when: CONTAINERIZATION_TECHS and SYSTEMD_IS_RUNNING

      - name: Verifying that the user can run docker commands
        ansible.builtin.command:
          cmd: /usr/bin/docker run hello-world
        register: DOCKER_RUN_OUTPUT
        when: CONTAINERIZATION_TECHS and SYSTEMD_IS_RUNNING and (DOCKER_IMAGE_OUTPUT['images'] | length == 0)

      - name: Printing the output of "docker run hello-world"
        ansible.builtin.debug:
          var: DOCKER_RUN_OUTPUT['stderr_lines'] + DOCKER_RUN_OUTPUT['stdout_lines']
        when: DOCKER_RUN_OUTPUT['changed']

      - name: Printing message about systemd
        ansible.builtin.debug:
          msg: It seems that Ubuntu was not started with systemd. This means that some tasks were skipped. Run this Ansible playbook again after restarting WSL.
        when: not SYSTEMD_IS_RUNNING
