---
  - name: Collecting information and checking system
    hosts: localhost
    connection: local
    vars:
      MINIMUM_UBUNTU_VERSION: "20.04"
      ARCHITECTURE_ALIAS:
        x86_64: amd64
      REQUIRED_PPAS:
        # Git
        - git-core/ppa
        # Ansible
        - ansible/ansible
      REQUIRED_APT_KEYRINGS:
        - google-chrome
      JAVA_APT_KEYRINGS:
        - azul
      CONTAINERIZATION_APT_KEYRINGS:
        - docker
        - microsoft
        - kubernetes-apt-keyring
      REQUIRED_REPOSITORIES:
        - filename: google-chrome
          repository: deb [arch={{ ARCHITECTURE }}] https://dl.google.com/linux/chrome/deb/ stable main
      JAVA_REPOSITORIES:
        - filename: zulu
          repository: deb [signed-by=/etc/apt/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main
      CONTAINERIZATION_REPOSITORIES:
        - filename: docker
          repository: deb [arch={{ ARCHITECTURE }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ UBUNTU_CODENAME }} stable
        - filename: azure-cli
          repository: deb [arch={{ ARCHITECTURE }} signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ {{ UBUNTU_CODENAME }} main
      REQUIRED_PACKAGES:
        - google-chrome-stable
      JAVA_PACKAGES:
        - default-jdk
        - default-jdk-doc
        - maven
        - zulu{{ JDK_VERSION }}-jdk
      CONTAINERIZATION_PACKAGES:
        # Docker
        - docker-ce
        - docker-ce-cli
        - containerd.io
        - docker-buildx-plugin
        - docker-compose-plugin
        # Kubernetes
        - kubectl
        # Azure CLI
        - azure-cli
      UNWANTED_PACKAGES:
        - firefox
      UNWANTED_DOCKER_PACKAGES:
        - docker
        - docker-engine
        - docker.io
        - containerd
        - runc
      NEVER_WANTED_SNAPS:
        - code
      UNWANTED_CONTAINERIZATION_SNAPS:
        - helm
      REQUIRED_SYSTEMD_SERVICES:
        - unattended-upgrades
        - snapd
      CONTAINERIZATION_SERVICES:
        - docker.service
        - containerd.service
      REQUIRED_SNAPS:
        - firefox
      JAVA_CLASSIC_SNAPS:
        - intellij-idea-community
      CONTAINERIZATION_CLASSIC_SNAPS: []
      REQUIRED_PYTHON_PACKAGES:
        - pip
        - ansible-lint
      CONTAINERIZATION_PYTHON_PACKAGES:
        - docker
      REQUIRED_CONFIGURATION_FILES:
        # Geany
        - template: geany.conf
          target_filename: geany.conf
          target_directory: ~/.config/geany
        - template: geany.addons.conf
          target_filename: addons.conf
          target_directory: ~/.config/geany/plugins/addons
        - template: geany.autoclose.conf
          target_filename: autoclose.conf
          target_directory: ~/.config/geany/plugins/autoclose
        - template: geany.git-changebar.conf
          target_filename: git-changebar.conf
          target_directory: ~/.config/geany/plugins/git-changebar
        - template: geany.overview.conf
          target_filename: prefs.conf
          target_directory: ~/.config/geany/plugins/overview
        - template: geany.spellcheck.conf
          target_filename: spellcheck.conf
          target_directory: ~/.config/geany/plugins/spellcheck
        - template: geany.filetypes.CommitMessage.conf
          target_filename: filetypes.CommitMessage.conf
          target_directory: ~/.config/geany/filedefs
        - template: geany.filetypes.GitRebase.conf
          target_filename: filetypes.GitRebase.conf
          target_directory: ~/.config/geany/filedefs
        - template: geany.filetype_extensions.conf
          target_filename: filetype_extensions.conf
          target_directory: ~/.config/geany
        # Enchant
        - template: enchant_dictionary_en_US
          target_filename: en_US.dic
          target_directory: ~/.config/enchant

    tasks:

      - name: Exiting if we are not running Ubuntu
        ansible.builtin.fail:
          msg: >-
            The OS is {{ ansible_facts['distribution'] }}.
            This playbook is only meant to work with Ubuntu.
        when: ansible_facts['distribution'] != "Ubuntu"

      - name: Exiting if we are running an old version of Ubuntu
        ansible.builtin.fail:
          msg: >-
            The Ubuntu version is {{ ansible_facts['distribution_version'] }}.
            This playbook requires Ubuntu version {{ MINIMUM_UBUNTU_VERSION }} or newer.
        when: >-
          ([0,1] | map('extract', ansible_facts['distribution_version'].split('.')) | join('') | int)
          < (MINIMUM_UBUNTU_VERSION.split('.') | join('') | int)

      - name: Exiting if we are not able to determine the architecture
        ansible.builtin.fail:
          msg: Can't find an alias for architecture '{{ ansible_facts['architecture'] }}'.
        when: ansible_facts['architecture'] not in ARCHITECTURE_ALIAS

      - name: Exiting if FULLNAME or EMAIL are not defined
        ansible.builtin.fail:
          msg: Required variables FULLNAME or EMAIL are not defined.
        when: (FULLNAME is undefined) or (EMAIL is undefined)

      - name: Populating service facts
        ansible.builtin.service_facts:

      - name: Setting system variables
        ansible.builtin.set_fact:
          ARCHITECTURE: "{{ ARCHITECTURE_ALIAS[ansible_facts['architecture']] }}"
          DISTRIBUTION: "{{ ansible_facts['distribution'] }}"
          UBUNTU_CODENAME: "{{ ansible_facts['distribution_release'] }}"
          HOSTNAME: "{{ (ansible_facts['distribution'] + '-' + ansible_facts['distribution_version']) | replace('.', '-') }}"
          CURRENT_DIRECTORY: "{{ ansible_facts['env']['PWD'] }}"
          USERNAME: "{{ ansible_facts['user_id'] }}"
          FULLNAME: "{{ FULLNAME | trim }}"
          EMAIL: "{{ EMAIL | trim }}"
          SYSTEMD_IS_RUNNING: "{{ 'systemd-logind.service' in ansible_facts['services'] }}"
          CONTAINERIZATION_TECHS: "{{ (INSTALL_CONTAINERIZATION_TECHS | default('false')) == 'true' }}"
          INSTALL_JAVA: "{{ (INSTALL_JAVA_TOOLS | default('false')) == 'true' }}"

      - name: Determining the kubectl repository
        block:
          - name: Getting the latest kubectl version
            ansible.builtin.uri:
              url: https://dl.k8s.io/release/stable.txt
              return_content: yes
            register: KUBECTL_VERSION_QUERY
            failed_when: >-
              (KUBECTL_VERSION_QUERY is failed) or
              (KUBECTL_VERSION_QUERY['status'] != 200) or
              (KUBECTL_VERSION_QUERY['content_type'] != "text/plain") or
              (KUBECTL_VERSION_QUERY['content'] | ansible.builtin.regex_search('^v[0-9]+\\.[0-9]+\\.[0-9]+$') is none)

          - name: Storing kubectl version in a variable
            ansible.builtin.set_fact:
              KUBECTL_VERSION: "{{ KUBECTL_VERSION_QUERY['content'] | ansible.builtin.regex_replace('\\.[0-9]+$', '') }}"

          - name: Storing kubectl repository settings in a variable
            ansible.builtin.set_fact:
              KUBECTL_REPOSITORY:
                - filename: kubernetes
                  repository: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/{{ KUBECTL_VERSION }}/deb/ /
        when: CONTAINERIZATION_TECHS

      - name: Setting variables for unattended-upgrades
        tags: unattended-upgrades
        ansible.builtin.set_fact:
          UNATTENDED_UPGRADES_CONFIGURATION_FILES:
            - 10periodic
            - 20auto-upgrades
          UNATTENDED_UPGRADES_UBUNTU_SOURCES:
            - origin: ${distro_id}
              archive: ${distro_codename}
            - origin: ${distro_id}
              archive: ${distro_codename}-security
            - origin: ${distro_id}ESMApps
              archive: ${distro_codename}-apps-security
            - origin: ${distro_id}ESM
              archive: ${distro_codename}-infra-security
            - origin: ${distro_id}
              archive: ${distro_codename}-updates
          UNATTENDED_UPGRADES_OPTION_LINES:
            - search_string: >-
                Unattended-Upgrade::AutoFixInterruptedDpkg
              line: "Unattended-Upgrade::AutoFixInterruptedDpkg \"true\";"
            - search_string: >-
                Unattended-Upgrade::MinimalSteps
              line: "Unattended-Upgrade::MinimalSteps \"true\";"
            - search_string: >-
                Unattended-Upgrade::Remove-Unused-Kernel-Packages
              line: "Unattended-Upgrade::Remove-Unused-Kernel-Packages \"true\";"
            - search_string: >-
                Unattended-Upgrade::Remove-New-Unused-Dependencies
              line: "Unattended-Upgrade::Remove-New-Unused-Dependencies \"true\";"
            - search_string: >-
                Unattended-Upgrade::Remove-Unused-Dependencies
              line: "Unattended-Upgrade::Remove-Unused-Dependencies \"true\";"
            - search_string: >-
                Unattended-Upgrade::OnlyOnACPower
              line: "Unattended-Upgrade::OnlyOnACPower \"true\";"
            - search_string: >-
                Unattended-Upgrade::Verbose
              line: "Unattended-Upgrade::Verbose \"true\";"

      - name: Setting playbook variables
        ansible.builtin.set_fact:
          PPAS: '{{ REQUIRED_PPAS }}'
          APT_KEYRINGS: >-
            {{ REQUIRED_APT_KEYRINGS +
            (JAVA_APT_KEYRINGS if INSTALL_JAVA else []) +
            (CONTAINERIZATION_APT_KEYRINGS if CONTAINERIZATION_TECHS else []) }}
          REPOSITORIES: >-
            {{ REQUIRED_REPOSITORIES +
            (JAVA_REPOSITORIES if INSTALL_JAVA else []) +
            ((CONTAINERIZATION_REPOSITORIES + KUBECTL_REPOSITORY) if CONTAINERIZATION_TECHS else []) }}
          ADDITIONAL_PACKAGES: >-
            {{ REQUIRED_PACKAGES +
            (JAVA_PACKAGES if INSTALL_JAVA else []) +
            (CONTAINERIZATION_PACKAGES if CONTAINERIZATION_TECHS else []) }}
          UNWANTED_APT_PACKAGES: >-
            {{ UNWANTED_PACKAGES +
            (UNWANTED_DOCKER_PACKAGES if CONTAINERIZATION_TECHS else []) }}
          UNWANTED_DOCKER_APT_PACKAGES: '{{ UNWANTED_DOCKER_PACKAGES }}'
          UNWANTED_SNAPS: >-
            {{ NEVER_WANTED_SNAPS +
            (UNWANTED_CONTAINERIZATION_SNAPS if CONTAINERIZATION_TECHS else []) }}
          SYSTEMD_SERVICES: >-
            {{ REQUIRED_SYSTEMD_SERVICES +
            (CONTAINERIZATION_SERVICES if CONTAINERIZATION_TECHS else []) }}
          SNAPS: '{{ REQUIRED_SNAPS }}'
          CLASSIC_SNAPS: >-
            {{ [] +
            (JAVA_CLASSIC_SNAPS if INSTALL_JAVA else []) +
            (CONTAINERIZATION_CLASSIC_SNAPS if CONTAINERIZATION_TECHS else []) }}
          PYTHON_PACKAGES: >-
            {{ REQUIRED_PYTHON_PACKAGES +
            (CONTAINERIZATION_PYTHON_PACKAGES if CONTAINERIZATION_TECHS else []) }}
          CONFIGURATION_FILES: '{{ REQUIRED_CONFIGURATION_FILES }}'

  - name: Systemwide changes
    hosts: localhost
    connection: local
    become: yes
    tags: system

    tasks:

      - name: Adding PPAs
        ansible.builtin.command:
          cmd: /usr/bin/add-apt-repository --yes "ppa:{{ item }}"
          creates: /etc/apt/sources.list.d/{{ item | replace('/', '-ubuntu-') }}-{{ UBUNTU_CODENAME }}.list
        loop: '{{ PPAS }}'

      - name: Updating system
        ansible.builtin.apt:
          update_cache: yes
          upgrade: full
        tags: update

      - name: Installing packages
        ansible.builtin.apt:
          cache_valid_time: 600
          update_cache: yes
          install_recommends: yes
          name:
            - ansible
            - gnupg
            - ca-certificates
            - coreutils
            - grep
            - bash-completion
            - sed
            - aptitude
            - unattended-upgrades
            - update-notifier-common
            - distro-info
            - snapd
            - git
            - gitsome
            - openssh-client
            - joe
            - bat
            - mc
            - ncdu
            - fd-find
            - ytree
            - tofrodos
            - python3-pip
            - finger
            - htop
            - glances
            - colordiff
            - build-essential
            - cmake
            - p7zip-full
            - makepasswd
            - secure-delete
            - neofetch
            - screenfetch
            - curl
            - jq
            - unzip
            - dialog
            - ncurses-bin
            # Fonts
            - fonts-noto
            - fonts-recommended
            - fonts-cascadia-code
            - fonts-droid-fallback
            - fonts-firacode
            - fonts-font-awesome
            - fonts-fork-awesome
            - fonts-monoid
            - fonts-monoid-halfloose
            - fonts-monoid-halftight
            - fonts-monoid-loose
            - fonts-monoid-tight
            - fonts-liberation
            - fonts-inconsolata
            # GUI applications
            - xdg-utils
            - gitk
            - git-gui
            - geany
            - geany-plugins
            - adwaita-icon-theme-full
            - meld
            - gpa
            - font-manager
          state: latest
        tags: install

      - name: Creating directory /etc/apt/keyrings if it does not exist
        ansible.builtin.file:
          path: /etc/apt/keyrings
          state: directory
          mode: u=rwx,g=rx,o=rx

      - name: Adding GPG keys from apt_keyrings
        ansible.builtin.shell:
          cmd: /usr/bin/gpg --dearmor --output /etc/apt/keyrings/{{ item }}.gpg <./apt_keyrings/{{ item }}.txt
          creates: /etc/apt/keyrings/{{ item }}.gpg
          executable: /bin/bash
        loop: '{{ APT_KEYRINGS }}'

      - name: Ensuring GPG keys have correct permissions
        ansible.builtin.file:
          path: /etc/apt/keyrings/{{ item }}.gpg
          mode: u=rw,g=r,o=r
        loop: '{{ APT_KEYRINGS }}'

      # Google Chrome needs its GPG key in /etc/apt/trusted.gpg.d/.
      # Hopefully, this will change.
      - name: Copying google-chrome.gpg to /etc/apt/trusted.gpg.d/
        ansible.builtin.copy:
          src: /etc/apt/keyrings/google-chrome.gpg
          dest: /etc/apt/trusted.gpg.d/google-chrome.gpg
          mode: u=rw,g=r,o=r
          remote_src: yes

      - name: Adding repositories
        ansible.builtin.include_tasks:
          file: ./include_tasks/apt_repository.ansible.yml
        loop: '{{ REPOSITORIES }}'

      - name: Removing old versions of Docker
        ansible.builtin.apt:
          name: '{{ UNWANTED_DOCKER_APT_PACKAGES }}'
          state: absent
        when: CONTAINERIZATION_TECHS

      - name: Installing additional packages
        ansible.builtin.apt:
          update_cache: yes
          install_recommends: yes
          name: '{{ ADDITIONAL_PACKAGES }}'
          state: latest

      - name: Removing unwanted APT packages
        ansible.builtin.apt:
          name: '{{ UNWANTED_APT_PACKAGES }}'
          state: absent
        when: SYSTEMD_IS_RUNNING

      - name: Cleaning the local apt cache
        ansible.builtin.apt:
          autoclean: yes

      - name: Ensuring group docker exists
        ansible.builtin.group:
          name: docker
          state: present
        when: CONTAINERIZATION_TECHS

      - name: Adding the user to the docker group
        ansible.builtin.user:
          name: "{{ USERNAME }}"
          groups: docker
          append: yes
        notify: reboot required
        register: ADD_USER_TO_DOCKER_OUTPUT
        when: CONTAINERIZATION_TECHS

      - name: Starting services if they are not running
        ansible.builtin.service:
          name: '{{ item }}'
          state: started
          enabled: yes
        loop: '{{ SYSTEMD_SERVICES }}'
        when: SYSTEMD_IS_RUNNING

      - name: Updating existing snaps
        block:
          - name: Checking for snaps to update
            ansible.builtin.command:
              cmd: /usr/bin/snap refresh --list
            register: SNAPS_TO_UPDATE
            changed_when: false
            tags: snap

          - name: Refreshing snaps
            ansible.builtin.command:
              cmd: /usr/bin/snap refresh
            tags: snap
            when: SNAPS_TO_UPDATE['stdout_lines'] | length >= 2
        when: SYSTEMD_IS_RUNNING

      - name: Installing snaps
        community.general.snap:
          name: '{{ item }}'
        loop: '{{ SNAPS }}'
        tags: snap
        when: SYSTEMD_IS_RUNNING

      - name: Installing classic snaps
        community.general.snap:
          name: '{{ item }}'
          classic: true
        loop: '{{ CLASSIC_SNAPS }}'
        tags: snap
        when: SYSTEMD_IS_RUNNING

      - name: Removing unwanted snaps
        community.general.snap:
          name: '{{ item }}'
          state: absent
        loop: '{{ UNWANTED_SNAPS }}'
        tags: snap
        when: SYSTEMD_IS_RUNNING

      - name: Checking the Allowed-Origins line in 50unattended-upgrades
        ansible.builtin.command:
          cmd: >
            /usr/bin/grep --extended-regexp
            "^[[:space:]]*Unattended-Upgrade::Allowed-Origins[[:space:]]*{.*$"
            /etc/apt/apt.conf.d/50unattended-upgrades
        changed_when: false
        tags: unattended-upgrades
        register: ALLOWED_ORIGINS_LINE
        failed_when: >-
          (ALLOWED_ORIGINS_LINE is failed) or
          (ALLOWED_ORIGINS_LINE['stdout_lines'] | length != 1) or
          (ALLOWED_ORIGINS_LINE['stderr_lines'] != [])

      - name: Creating configuration files for unattended-upgrades
        ansible.builtin.template:
          src: ./templates/unattended-upgrades.{{ item }}.j2
          dest: /etc/apt/apt.conf.d/{{ item }}
          mode: u=rw,g=r,o=r
        notify:
          - reboot required
          - unattended-upgrades configuration changed
        loop: '{{ UNATTENDED_UPGRADES_CONFIGURATION_FILES }}'
        tags: unattended-upgrades

      - name: Saving a backup of 50unattended-upgrades
        ansible.builtin.copy:
          src: /etc/apt/apt.conf.d/50unattended-upgrades
          dest: /etc/apt/apt.conf.d/backup_of_50unattended-upgrades
          mode: u=r,g=r,o=r
          force: no
          remote_src: yes
        tags: unattended-upgrades

      - name: Determining unattended upgrades sources for additional repositories
        ansible.builtin.include_tasks:
          file: ./include_tasks/create_upgrade_source_for_repository.ansible.yml
        loop: "{{ REPOSITORIES | map(attribute='repository') }}"
        tags: unattended-upgrades

      - name: Determining unattended upgrades sources for PPAs
        ansible.builtin.include_tasks:
          file: ./include_tasks/create_upgrade_source_for_ppa.ansible.yml
        loop: '{{ PPAS }}'
        tags: unattended-upgrades

      - name: Setting variable for unattended upgrades sources
        ansible.builtin.set_fact:
          UNATTENDED_UPGRADES_SOURCES: >-
            {{ UNATTENDED_UPGRADES_UBUNTU_SOURCES +
            UNATTENDED_UPGRADES_EXTRA_SOURCES }}
        tags: unattended-upgrades

      - name: Setting variable for lines in 50unattended-upgrades
        ansible.builtin.set_fact:
          UNATTENDED_UPGRADES_SOURCE_LINES: >-
            {{ UNATTENDED_UPGRADES_SOURCE_LINES | default([]) + [
              '"' + (item['origin'] | replace(':', '\:')) + ':' +
              (item['archive'] | replace(':', '\:')) + '";'
            ] }}
        loop: '{{ UNATTENDED_UPGRADES_SOURCES }}'
        tags: unattended-upgrades

      - name: Setting sources in 50unattended-upgrades
        ansible.builtin.lineinfile:
          path: /etc/apt/apt.conf.d/50unattended-upgrades
          search_string: >-
            {{ item | ansible.builtin.regex_replace('v[0-9]+\.[0-9]+.*$', '') | trim }}
          line: "\t{{ item | trim }}"
          insertafter: "{{ ALLOWED_ORIGINS_LINE['stdout'] }}"
        notify:
          - reboot required
          - unattended-upgrades configuration changed
        loop: '{{ UNATTENDED_UPGRADES_SOURCE_LINES }}'
        tags: unattended-upgrades

      - name: Setting options in 50unattended-upgrades
        ansible.builtin.lineinfile:
          path: /etc/apt/apt.conf.d/50unattended-upgrades
          search_string: "{{ item['search_string'] }}"
          line: "{{ item['line'] }}"
        notify:
          - reboot required
          - unattended-upgrades configuration changed
        loop: '{{ UNATTENDED_UPGRADES_OPTION_LINES }}'
        tags: unattended-upgrades

      - name: Creating /etc/wsl.conf from template wsl.conf.j2
        ansible.builtin.template:
          src: ./templates/wsl.conf.j2
          dest: /etc/wsl.conf
          mode: u=rw,g=r,o=r
        notify: reboot required
        tags: wsl.conf

      - name: Setting the full name in /etc/passwd
        ansible.builtin.command:
          cmd: /usr/bin/chfn --full-name "{{ FULLNAME }}" {{ USERNAME }}
        ignore_errors: yes
        when: FULLNAME != (ansible_facts['user_gecos'] | split(','))[0]

    handlers:
      - name: Touching /var/run/reboot-required
        ansible.builtin.file:
          path: /var/run/reboot-required
          state: touch
          mode: u=rw,g=r,o=r
        listen: reboot required

      - name: Running unattended-upgrades
        ansible.builtin.command:
          cmd: /usr/bin/unattended-upgrade --debug
        tags: unattended-upgrades
        listen: unattended-upgrades configuration changed

  - name: Setting up the environment for the current user
    hosts: localhost
    connection: local
    tags: user
    vars:
      SSH_KEY_FILENAME: "id_ed25519.git"
      SSH_KEY_FINGERPRINTS:
        - github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
        - github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
        - github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        - gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
        - gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
        - gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
      GEANY_THEMES:
        - commit: 80d4762675d16063fb776e55b49973f3cbdc69bb
          filename: pygments.conf
          checksum: e71c6d9a3a656bdec588ad84dbdc48e43c3a2d54773184880c3289ebb4fa84daf3665120b086e740e967f1260fb6923245d7f97ef039e96a6245aac2a1f3792e
        - commit: 15c577d86dcd3a307a04a4213615e0d292a9c956
          filename: epsilon.conf
          checksum: 032e59037c4629b0d1a2a28f9f73b6e592022bab208da12509952dd25c2dda801d234cc8346ccedc34868216be9de99e76a3cedcd454cd48cd1d484bf166d350
        - commit: 31e6ee9bc825e16d3b48c0b30e20c763480da0c4
          filename: ubuntu.conf
          checksum: 548ebab2e3615b78f04f91b5a50b208540a91df26304a5c22b802fb31ff1b9bf6c3cbcf18e81c7ce4a67337bd9702ea5b09f033a34b1f4ee2d9eba49e07fc942

    tasks:

      - name: Getting the status of /var/run/reboot-required
        ansible.builtin.stat:
          path: /var/run/reboot-required
        register: STATUS_OF_REBOOT_REQUIRED

      - name: Setting variable REBOOT_REQUIRED
        ansible.builtin.set_fact:
          REBOOT_REQUIRED: "{{ STATUS_OF_REBOOT_REQUIRED['stat']['exists'] }}"

      - name: Creating directory ~/.ssh/ if it does not exist
        ansible.builtin.file:
          path: ~/.ssh/
          state: directory
          mode: u=rwx,g=,o=
        tags: ssh

      - name: Generating a GitHub recommended SSH key if it doesn't exist
        community.crypto.openssh_keypair:
          path: ~/.ssh/{{ SSH_KEY_FILENAME }}
          type: ed25519
          comment: "{{ EMAIL }}"
          regenerate: partial_idempotence
        tags: ssh

      - name: Creating ~/.ssh/config from template ssh_client_config.j2
        ansible.builtin.template:
          src: ./templates/ssh_client_config.j2
          dest: ~/.ssh/config
          mode: u=rw,g=,o=
          backup: yes
        tags: ssh

      - name: Adding SSH key fingerprints to ~/.ssh/known_hosts
        ansible.builtin.lineinfile:
          path: ~/.ssh/known_hosts
          line: '{{ item }}'
          mode: u=rw,g=,o=
          create: yes
        loop: '{{ SSH_KEY_FINGERPRINTS }}'
        tags: ssh

      - name: Setting up GPG
        ansible.builtin.command:
          cmd: ./scripts/setup_gpg.sh "{{ FULLNAME }}" "{{ EMAIL }}"
          creates: ~/.gnupg
        register: GPG_OUTPUT
        tags: gpg

      - name: Printing the output of GPG setup
        ansible.builtin.debug:
          var: GPG_OUTPUT['stdout_lines']
        tags: gpg

      - name: Creating directory bin/download if it does not exist
        ansible.builtin.file:
          path: "{{ CURRENT_DIRECTORY }}/bin/download"
          state: directory
          mode: u=rwx,g=,o=

      - name: Installing Maven locally
        block:
          - name: Getting the latest Maven version
            ansible.builtin.shell:
              cmd: >
                /usr/bin/curl --silent --show-error --fail --retry 5 --location
                "https://search.maven.org/solrsearch/select?q=g:org.apache.maven+AND+a:maven-core&core=gav&rows=20&wt=json" |
                /usr/bin/jq --raw-output '.response.docs | .[].v' |
                /usr/bin/grep --extended-regexp "^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$" |
                /usr/bin/head -n 1
              executable: /bin/bash
            changed_when: false
            register: MAVEN_VERSION_COMMAND
            failed_when: >-
              (MAVEN_VERSION_COMMAND is failed) or
              (MAVEN_VERSION_COMMAND['stdout_lines'] == []) or
              (MAVEN_VERSION_COMMAND['stderr_lines'] != [])

          - name: Storing Maven version in a variable
            ansible.builtin.set_fact:
              MAVEN_VERSION: "{{ MAVEN_VERSION_COMMAND['stdout'] }}"

          - name: Getting the checksum of the binary archive
            ansible.builtin.uri:
              url: https://downloads.apache.org/maven/maven-{{ MAVEN_VERSION.split('.')[0] }}/{{ MAVEN_VERSION }}/binaries/apache-maven-{{ MAVEN_VERSION }}-bin.tar.gz.sha512
              return_content: yes
            register: MAVEN_CHECKSUM_COMMAND
            failed_when: >-
              (MAVEN_CHECKSUM_COMMAND is failed) or
              (MAVEN_CHECKSUM_COMMAND['status'] != 200) or
              (MAVEN_CHECKSUM_COMMAND['content_length'] != "128")

          - name: Storing the filename of the binary archive in a variable
            ansible.builtin.set_fact:
              MAVEN_FILENAME: apache-maven-{{ MAVEN_VERSION }}-bin.tar.gz

          - name: Downloading Maven
            ansible.builtin.get_url:
              url: https://dlcdn.apache.org/maven/maven-{{ MAVEN_VERSION.split('.')[0] }}/{{ MAVEN_VERSION }}/binaries/{{ MAVEN_FILENAME }}
              dest: "{{ CURRENT_DIRECTORY }}/bin/download"
              mode: u=rw,g=,o=
              checksum: sha512:{{ MAVEN_CHECKSUM_COMMAND['content'] }}

          - name: Unarchiving Maven
            ansible.builtin.unarchive:
              src: "{{ CURRENT_DIRECTORY }}/bin/download/{{ MAVEN_FILENAME }}"
              dest: "{{ CURRENT_DIRECTORY }}/bin"
              remote_src: yes
        when: INSTALL_JAVA

      - name: Installing Helm locally
        vars:
          HELM_BASE_URL: https://get.helm.sh/
        block:
          - name: Getting the latest Helm version
            ansible.builtin.uri:
              url: "{{ HELM_BASE_URL }}helm-latest-version"
              return_content: yes
            register: HELM_VERSION_QUERY
            failed_when: >-
              (HELM_VERSION_QUERY is failed) or
              (HELM_VERSION_QUERY['status'] != 200) or
              (HELM_VERSION_QUERY['content_type'] != "application/octet-stream") or
              (HELM_VERSION_QUERY['content'] | ansible.builtin.regex_search('^v[0-9]+\\.[0-9]+\\.[0-9]+$') is none)

          - name: Storing the filename and installation directory in variables
            ansible.builtin.set_fact:
              HELM_FILENAME: helm-{{ HELM_VERSION_QUERY['content'] | trim }}-linux-{{ ARCHITECTURE }}.tar.gz
              HELM_INSTALL_DIRECTORY: >-
                {{ CURRENT_DIRECTORY }}/bin/helm-{{ HELM_VERSION_QUERY['content'] | trim }}

          - name: Getting the checksum of the binary archive
            ansible.builtin.uri:
              url: "{{ HELM_BASE_URL }}{{ HELM_FILENAME }}.sha256"
              return_content: yes
            register: HELM_CHECKSUM_QUERY
            failed_when: >-
              (HELM_CHECKSUM_QUERY is failed) or
              (HELM_CHECKSUM_QUERY['status'] != 200) or
              (HELM_CHECKSUM_QUERY['content_length'] != "65")

          - name: Downloading Helm
            ansible.builtin.get_url:
              url: "{{ HELM_BASE_URL }}{{ HELM_FILENAME }}"
              dest: "{{ CURRENT_DIRECTORY }}/bin/download"
              mode: u=rw,g=,o=
              checksum: sha256:{{ HELM_CHECKSUM_QUERY['content'] }}

          - name: Creating directory for Helm installation
            ansible.builtin.file:
              path: "{{ HELM_INSTALL_DIRECTORY }}"
              state: directory
              mode: u=rwx,g=,o=

          - name: Unarchiving Helm
            ansible.builtin.unarchive:
              src: "{{ CURRENT_DIRECTORY }}/bin/download/{{ HELM_FILENAME }}"
              dest: "{{ HELM_INSTALL_DIRECTORY }}"
              remote_src: yes
        when: CONTAINERIZATION_TECHS

      - name: Creating ~/bash_profile.sh from template bash_profile.sh.j2
        ansible.builtin.template:
          src: ./templates/bash_profile.sh.j2
          dest: ~/bash_profile.sh
          mode: u=rwx,g=r,o=r
        register: BASH_PROFILE_SH_OUTPUT
        tags: bash_profile.sh

      - name: Adding a line to ~/.bashrc to run ~/bash_profile.sh
        ansible.builtin.lineinfile:
          path: ~/.bashrc
          line: . ~/bash_profile.sh
          backup: yes
        tags: bash_profile.sh

      - name: Creating directory for Geany themes
        ansible.builtin.file:
          path: ~/.config/geany/colorschemes
          state: directory
          mode: u=rwx,g=,o=
        tags: Geany

      - name: Downloading Geany themes
        ansible.builtin.get_url:
          url: https://raw.githubusercontent.com/geany/geany-themes/{{ item['commit'] }}/colorschemes/{{ item['filename'] }}
          dest: ~/.config/geany/colorschemes
          mode: u=rw,g=,o=
          checksum: sha512:{{ item['checksum'] }}
        loop: '{{ GEANY_THEMES }}'
        tags: Geany

      - name: Copying Geany theme pygments.conf to pygments_customized.conf
        ansible.builtin.copy:
          src: ~/.config/geany/colorschemes/pygments.conf
          dest: ~/.config/geany/colorschemes/pygments_customized.conf
          mode: u=rw,g=,o=
          force: no
          remote_src: yes
        tags: Geany

      - name: Customizing Geany theme
        ansible.builtin.lineinfile:
          path: ~/.config/geany/colorschemes/pygments_customized.conf
          regexp: "{{ item['regexp'] }}"
          line: "{{ item['line'] }}"
        loop:
          - regexp: "^name=Pygments"
            line: name=Pygments Customized
          - regexp: "^description="
            line: description=Customized Pygments theme for Geany
          - regexp: "^string="
            line: string=#002989;;false;false
          - regexp: "^default="
            line: default=#161616;#fbfbfb;false;false
          - regexp: "^current_line="
            line: current_line=#2e3436;#ebebeb;true
          - regexp: "^number="
            line: number=#9400b2
          - regexp: "^attribute="
            line: attribute=#0022aa;;true
          - regexp: "^attribute_unknown="
            line: attribute_unknown=#0022aa
        tags: Geany

      - name: Creating directories for configuration files
        ansible.builtin.file:
          path: "{{ item['target_directory'] }}"
          state: directory
          mode: u=rwx,g=,o=
        loop: '{{ CONFIGURATION_FILES }}'

      - name: Creating configuration files from templates
        ansible.builtin.template:
          src: ./templates/{{ item['template'] }}.j2
          dest: "{{ item['target_directory'] }}/{{ item['target_filename'] }}"
          mode: u=rw,g=,o=
          force: no
        loop: '{{ CONFIGURATION_FILES }}'

      - name: Getting the status of ~/.local/bin/pip3
        ansible.builtin.stat:
          path: ~/.local/bin/pip3
        register: STATUS_OF_PIP3

      - name: Installing pip locally
        ansible.builtin.pip:
          name: pip
          state: latest
          executable: /usr/bin/pip3
        when: not STATUS_OF_PIP3['stat']['exists']

      - name: Installing python packages locally
        ansible.builtin.pip:
          name: '{{ PYTHON_PACKAGES }}'
          state: latest
          executable: ~/.local/bin/pip3

      - name: Verifying that the user can run docker commands
        block:
          - name: Inspecting if image hello-world is present
            community.docker.docker_image_info:
              name: hello-world
            register: DOCKER_IMAGE_OUTPUT

          - name: Executing "docker run hello-world"
            ansible.builtin.command:
              cmd: /usr/bin/docker run hello-world
            register: DOCKER_RUN_OUTPUT
            failed_when: >-
              (DOCKER_RUN_OUTPUT is failed) or
              ("This message shows that your installation appears to be working correctly."
                not in DOCKER_RUN_OUTPUT['stdout_lines'])
            when: DOCKER_IMAGE_OUTPUT['images'] | length == 0
        when:
          - CONTAINERIZATION_TECHS
          - SYSTEMD_IS_RUNNING
          - ADD_USER_TO_DOCKER_OUTPUT is defined
          - not ADD_USER_TO_DOCKER_OUTPUT['changed']
          - not REBOOT_REQUIRED

      - name: Verifying the default Java and Maven versions
        block:
          - name: Verifying the default Java version
            ansible.builtin.shell:
              cmd: >
                java --version | /usr/bin/grep --fixed-strings "openjdk {{ JDK_VERSION }}." &&
                java --version | /usr/bin/grep --fixed-strings "OpenJDK Runtime Environment Zulu{{ JDK_VERSION }}"
              executable: /bin/bash
            changed_when: false
            register: JAVA_VERSION_COMMAND
            failed_when: >-
              (JAVA_VERSION_COMMAND is failed) or
              (JAVA_VERSION_COMMAND['stdout_lines'] | length != 2) or
              (JAVA_VERSION_COMMAND['stderr_lines'] != [])

          - name: Verifying the default Maven version
            ansible.builtin.shell:
              cmd: >
                mvn --version | /usr/bin/grep --fixed-strings "Apache Maven {{ MAVEN_VERSION }}"
              executable: /bin/bash
            changed_when: false
            register: MAVEN_VERSION_CHECK
            failed_when: >-
              (MAVEN_VERSION_CHECK is failed) or
              (MAVEN_VERSION_CHECK['stdout_lines'] | length != 1) or
              (MAVEN_VERSION_CHECK['stderr_lines'] != [])
        when:
          - INSTALL_JAVA
          - not BASH_PROFILE_SH_OUTPUT['changed']
          - not REBOOT_REQUIRED

      - name: Verifying the default Helm version
        ansible.builtin.shell:
          cmd: >
            helm version --template='{{ '{{' }}.Version{{ '}}' }}'
          executable: /bin/bash
        changed_when: false
        register: HELM_VERSION_COMMAND
        failed_when: >-
          (HELM_VERSION_COMMAND is failed) or
          (HELM_VERSION_COMMAND['stdout'] != (HELM_VERSION_QUERY['content'] | trim)) or
          (HELM_VERSION_COMMAND['stderr_lines'] != [])
        when:
          - CONTAINERIZATION_TECHS
          - not BASH_PROFILE_SH_OUTPUT['changed']
          - not REBOOT_REQUIRED

      - name: Getting APT configuration
        ansible.builtin.shell:
          cmd: /usr/bin/apt-config dump | /usr/bin/sort --unique
          executable: /bin/bash
        register: APT_CONFIGURATION_DUMP
        changed_when: false
        tags: unattended-upgrades

      - name: Getting intended configuration from files
        ansible.builtin.command:
          cmd: >
            /usr/bin/cat
            {{ ['/etc/apt/apt.conf.d/'] | product(UNATTENDED_UPGRADES_CONFIGURATION_FILES)
            | map('join', '')
            | join(' ') }}
        register: UNATTENDED_UPGRADES_CONFIGURATION_FROM_FILES
        changed_when: false
        tags: unattended-upgrades

      - name: Verifying unattended-upgrades configuration
        ansible.builtin.fail:
          msg: Setting '{{ item }}' was not found.
        when: item not in APT_CONFIGURATION_DUMP['stdout_lines']
        loop: >-
          {{ (['Unattended-Upgrade::Allowed-Origins::']
              | product(UNATTENDED_UPGRADES_SOURCE_LINES | map('trim'))
              | map('join', ' ')) +
             (UNATTENDED_UPGRADES_OPTION_LINES | map(attribute='line')) +
             UNATTENDED_UPGRADES_CONFIGURATION_FROM_FILES['stdout_lines'] }}
        tags:
          - unattended-upgrades
          - system

      - name: Getting the list of all supported stable versions of Ubuntu
        ansible.builtin.command:
          cmd: /usr/bin/distro-info --supported
        register: SUPPORTED_UBUNTU_VERSIONS
        changed_when: false
        tags: distro-info

      - name: Printing message about systemd
        ansible.builtin.debug:
          msg: >-
            It seems that Ubuntu was not started with systemd.
            This means that some tasks were skipped.
            Run 'run_install_script' after restarting WSL.
        when: not SYSTEMD_IS_RUNNING

      - name: Printing message about Docker
        ansible.builtin.debug:
          msg: >-
            Docker was installed. In order to verify that the user can run docker commands,
            run 'run_install_script' after restarting WSL.
        when:
          - ADD_USER_TO_DOCKER_OUTPUT is defined
          - ADD_USER_TO_DOCKER_OUTPUT['changed']

      - name: Printing message if the current Ubuntu version is unsupported
        ansible.builtin.debug:
          msg: >-
            WARNING: You are currently using {{ ansible_facts['lsb']['description'] }}
            which is no longer supported.
            You should switch to a newer version of Ubuntu.
        when: UBUNTU_CODENAME not in SUPPORTED_UBUNTU_VERSIONS['stdout_lines']
        tags: distro-info
